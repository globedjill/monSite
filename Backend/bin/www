#!/usr/bin/env node

const http = require('http');
const https = require('https');
const app = require('../app');
var debug = require('debug')('server:server');
const fs = require('fs');
const path = require('path');
const env = require(`../environment/${ process.env.NODE_ENV}`);


http.createServer((req, res) => {
    res.writeHead('301', { Location: `https://${ req.headers.host.split(':')[0] + ':' + env.portHTTPs }${ req.url }` })
    res.end()
}).listen(env.portHTTP);


const server = https.createServer({
    key: fs.readFileSync(env.key),
    cert: fs.readFileSync(env.cert)
}, app);
// serverHTTPS.listen(port2) //https

const portHttps = normalizePort(process.env.PORT || env.portHTTPs);
app.set('port', portHttps);

server.listen(portHttps) //http
server.on('error', onError);
server.on('listening', onListening);

/** HTTPS */
// const port2 = normalizePort(process.env.PORT || '443');

/** Normalize a port into a number, string, or false.*/
function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        // named pipe
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }
    return false;
}

/** Event listener for HTTP server "error" event.*/
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;
    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/** Event listener for HTTP server "listening" event.*/
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}